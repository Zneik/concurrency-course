Index: src/main/java/course/concurrency/m3_shared/immutable/OrderServiceImmutable2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m3_shared/immutable/OrderServiceImmutable2.java b/src/main/java/course/concurrency/m3_shared/immutable/OrderServiceImmutable2.java
new file mode 100644
--- /dev/null	(date 1665590614579)
+++ b/src/main/java/course/concurrency/m3_shared/immutable/OrderServiceImmutable2.java	(date 1665590614579)
@@ -0,0 +1,44 @@
+package course.concurrency.m3_shared.immutable;
+
+import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
+
+public class OrderServiceImmutable2 {
+
+    // Here we don't use AtomicReference and update values inside merge function
+    // when contention for value is low it's ok to use synchronized
+    private final ConcurrentHashMap<Long, OrderImmutable> currentOrders = new ConcurrentHashMap<>();
+
+    public long createOrder(List<Item> items) {
+        OrderImmutable order = new OrderImmutable(items);
+        currentOrders.put(order.getId(), order);
+        return order.getId();
+    }
+
+    public void updatePaymentInfo(long orderId, PaymentInfo paymentInfo) {
+        OrderImmutable paid = currentOrders.compute(orderId, (key, o) -> o.withPaymentInfo(paymentInfo));
+
+        // remember that main profit of immutable variables is locality
+        if (paid.checkStatus()) {
+            deliver(paid);
+        }
+    }
+
+    public void setPacked(long orderId) {
+        OrderImmutable packed = currentOrders.compute(orderId, (key, o) -> o.doPack());
+
+        if (packed.checkStatus()) {
+            deliver(packed);
+        }
+    }
+
+    private void deliver(OrderImmutable order) {
+        /* ... */
+        currentOrders.compute(order.getId(), (key, o) -> o.withStatus(OrderImmutable.Status.DELIVERED));
+
+    }
+
+    public boolean isDelivered(long orderId) {
+        return currentOrders.get(orderId).getStatus().equals(OrderImmutable.Status.DELIVERED);
+    }
+}
Index: src/main/java/course/concurrency/m3_shared/immutable/OrderServiceImmutable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m3_shared/immutable/OrderServiceImmutable.java b/src/main/java/course/concurrency/m3_shared/immutable/OrderServiceImmutable.java
new file mode 100644
--- /dev/null	(date 1665590567805)
+++ b/src/main/java/course/concurrency/m3_shared/immutable/OrderServiceImmutable.java	(date 1665590567805)
@@ -0,0 +1,57 @@
+package course.concurrency.m3_shared.immutable;
+
+import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicReference;
+
+public class OrderServiceImmutable {
+
+    // AtomicReference is used to prevent lost updates via CAS operations
+    private final ConcurrentHashMap<Long, AtomicReference<OrderImmutable>> currentOrders = new ConcurrentHashMap<>();
+
+    public long createOrder(List<Item> items) {
+        OrderImmutable order = new OrderImmutable(items);
+        currentOrders.put(order.getId(), new AtomicReference<>(order));
+        return order.getId();
+    }
+
+    public void updatePaymentInfo(long orderId, PaymentInfo paymentInfo) {
+        OrderImmutable current, paid;
+        do {
+            current = currentOrders.get(orderId).get();
+            paid = current.withPaymentInfo(paymentInfo);
+        } while (!currentOrders.get(orderId).compareAndSet(current, paid));
+
+        // paid is a local immutable object, we can safely check its status without synchronization
+        if (paid.checkStatus()) {
+            deliver(paid);
+        }
+    }
+
+    // CAS update is a classic partner to immutable objects
+    public void setPacked(long orderId) {
+        OrderImmutable current, packed;
+        do {
+            current = currentOrders.get(orderId).get();
+            packed = current.doPack();
+        } while (!currentOrders.get(orderId).compareAndSet(current, packed));
+
+        if (packed.checkStatus()) {
+            deliver(packed);
+        }
+    }
+
+    private void deliver(OrderImmutable order) {
+        OrderImmutable current, delivered;
+        long orderId = order.getId();
+        do {
+            current = currentOrders.get(orderId).get();
+            delivered = current.withStatus(OrderImmutable.Status.DELIVERED);
+        } while (!currentOrders.get(orderId).compareAndSet(current, delivered));
+
+    }
+
+    public boolean isDelivered(long orderId) {
+        return currentOrders.get(orderId).get().getStatus().equals(OrderImmutable.Status.DELIVERED);
+    }
+}
Index: src/main/java/course/concurrency/m3_shared/immutable/OrderImmutable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m3_shared/immutable/OrderImmutable.java b/src/main/java/course/concurrency/m3_shared/immutable/OrderImmutable.java
new file mode 100644
--- /dev/null	(date 1657102154270)
+++ b/src/main/java/course/concurrency/m3_shared/immutable/OrderImmutable.java	(date 1657102154270)
@@ -0,0 +1,61 @@
+package course.concurrency.m3_shared.immutable;
+
+import java.util.List;
+import java.util.concurrent.atomic.AtomicLong;
+
+public final class OrderImmutable {
+
+    public enum Status {NEW, IN_PROGRESS, DELIVERED}
+
+    private static final AtomicLong nextId = new AtomicLong();
+
+    private final Long id;
+    private final List<Item> items;
+    private final PaymentInfo paymentInfo;
+    private final boolean isPacked;
+    private final Status status;
+
+    public OrderImmutable(List<Item> items) {
+        this(nextId.incrementAndGet(), items, null, false, Status.NEW);
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    private OrderImmutable(Long id, List<Item> items, PaymentInfo paymentInfo, boolean isPacked, Status status) {
+        this.id = id;
+        this.items = items;
+        this.paymentInfo = paymentInfo;
+        this.isPacked = isPacked;
+        this.status = status;
+    }
+
+    public OrderImmutable withStatus(Status status) {
+        return new OrderImmutable(this.id, this.items, this.paymentInfo, this.isPacked, status);
+    }
+
+    public OrderImmutable withPaymentInfo(PaymentInfo paymentInfo) {
+        return new OrderImmutable(this.id, this.items, paymentInfo, this.isPacked, this.status);
+    }
+
+    public OrderImmutable doPack() {
+        return new OrderImmutable(this.id, this.items, this.paymentInfo, true, this.status);
+
+    }
+
+    public boolean checkStatus() {
+        if (paymentInfo != null && isPacked) {
+            return true;
+        }
+        return false;
+    }
+
+    public List<Item> getItems() {
+        return items;
+    }
+
+    public Status getStatus() {
+        return status;
+    }
+}
\ No newline at end of file