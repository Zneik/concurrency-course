Index: src/main/java/course/concurrency/m2_async/cf/min_price/PriceAggregatorReady.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m2_async/cf/min_price/PriceAggregatorReady.java b/src/main/java/course/concurrency/m2_async/cf/min_price/PriceAggregatorReady.java
new file mode 100644
--- /dev/null	(date 1664795262809)
+++ b/src/main/java/course/concurrency/m2_async/cf/min_price/PriceAggregatorReady.java	(date 1664795262809)
@@ -0,0 +1,45 @@
+package course.concurrency.m2_async.cf.min_price;
+
+import java.util.Collection;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.TimeUnit;
+
+import static java.util.stream.Collectors.toList;
+
+public class PriceAggregatorReady extends PriceAggregator {
+
+    private PriceRetriever priceRetriever = new PriceRetriever();
+
+    public void setPriceRetriever(PriceRetriever priceRetriever) {
+        this.priceRetriever = priceRetriever;
+    }
+
+    private Collection<Long> shopIds = Set.of(10l, 45l, 66l, 345l, 234l, 333l, 67l, 123l, 768l);
+
+    public void setShops(Collection<Long> shopIds) {
+        this.shopIds = shopIds;
+    }
+
+    public double getMinPrice(long itemId) {
+        List<CompletableFuture<Double>> completableFutureList =
+               shopIds.stream().map(shopId ->
+                       CompletableFuture.supplyAsync(
+                            () -> priceRetriever.getPrice(itemId, shopId))
+                            .completeOnTimeout(Double.POSITIVE_INFINITY, 2900, TimeUnit.MILLISECONDS)
+                            .handle((res, ex) -> res != null ? res : Double.POSITIVE_INFINITY))
+                       .collect(toList());
+
+        CompletableFuture
+                .allOf(completableFutureList.toArray(CompletableFuture[]::new))
+                .join();
+
+        return completableFutureList
+                .stream()
+                .mapToDouble(CompletableFuture::join)
+                .filter(Double::isFinite)
+                .min()
+                .orElse(Double.NaN);
+    }
+}