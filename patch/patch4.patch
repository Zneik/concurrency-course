Index: src/main/java/course/concurrency/exams/auction/AuctionStoppablePessimisticReady.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/exams/auction/AuctionStoppablePessimisticReady.java b/src/main/java/course/concurrency/exams/auction/AuctionStoppablePessimisticReady.java
new file mode 100644
--- /dev/null	(date 1665570250144)
+++ b/src/main/java/course/concurrency/exams/auction/AuctionStoppablePessimisticReady.java	(date 1665570250144)
@@ -0,0 +1,42 @@
+package course.concurrency.exams.auction;
+
+public class AuctionStoppablePessimisticReady implements AuctionStoppable {
+
+    private final Notifier notifier;
+
+    private volatile Bid latestBid = new Bid(-1L, -1L, -1L);
+    private volatile boolean isOpen = true;
+
+    private final Object lock = new Object();
+
+    public AuctionStoppablePessimisticReady(Notifier notifier) {
+        this.notifier = notifier;
+    }
+
+    public boolean propose(Bid bid) {
+        // this condition filter bids with lower price and seriously reduce contention
+        if (isOpen && (bid.getPrice() > latestBid.getPrice())) {
+            synchronized (lock) {
+                if (isOpen && (bid.getPrice() > latestBid.getPrice())) {
+                    notifier.sendOutdatedMessage(latestBid);
+                    latestBid = bid;
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    public Bid getLatestBid() {
+        return latestBid;
+    }
+
+    public Bid stopAuction() {
+        // these block prevents situation when synchronized block in line 19 is passed and isOpen is changed immediately
+        // actually, it can be omitted in most cases as requirements are rarely so strict
+        synchronized (lock) {
+            isOpen = false;
+            return latestBid;
+        }
+    }
+}
Index: src/main/java/course/concurrency/exams/auction/AuctionOptimisticReady.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/exams/auction/AuctionOptimisticReady.java b/src/main/java/course/concurrency/exams/auction/AuctionOptimisticReady.java
new file mode 100644
--- /dev/null	(date 1665590025197)
+++ b/src/main/java/course/concurrency/exams/auction/AuctionOptimisticReady.java	(date 1665590025197)
@@ -0,0 +1,31 @@
+package course.concurrency.exams.auction;
+
+import java.util.concurrent.atomic.AtomicReference;
+
+public class AuctionOptimisticReady implements Auction {
+    private final Notifier notifier;
+
+    private final AtomicReference<Bid> latestBid;
+    public AuctionOptimisticReady(Notifier notifier) {
+        latestBid = new AtomicReference<>(new Bid(-1l, -1l, -1l));
+        this.notifier = notifier;
+    }
+
+    public boolean propose(Bid bid) {
+        Bid currentBid;
+        do {
+            currentBid = latestBid.get();
+            if (bid.getPrice() <= currentBid.getPrice()) {
+                return false;
+            }
+        } while (!latestBid.compareAndSet(currentBid, bid));
+
+        notifier.sendOutdatedMessage(currentBid);
+
+        return true;
+    }
+
+    public Bid getLatestBid() {
+        return latestBid.get();
+    }
+}
Index: src/main/java/course/concurrency/exams/auction/AuctionStoppableOptimisticReady.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/exams/auction/AuctionStoppableOptimisticReady.java b/src/main/java/course/concurrency/exams/auction/AuctionStoppableOptimisticReady.java
new file mode 100644
--- /dev/null	(date 1665570825751)
+++ b/src/main/java/course/concurrency/exams/auction/AuctionStoppableOptimisticReady.java	(date 1665570825751)
@@ -0,0 +1,45 @@
+package course.concurrency.exams.auction;
+
+import java.util.concurrent.atomic.AtomicMarkableReference;
+
+public class AuctionStoppableOptimisticReady implements AuctionStoppable {
+
+    private final AtomicMarkableReference<Bid> latestBid;
+    private final Notifier notifier;
+
+    public AuctionStoppableOptimisticReady(Notifier notifier) {
+        latestBid = new AtomicMarkableReference<>(new Bid(-1l, -1l, -1l), false);
+        this.notifier = notifier;
+    }
+
+    public boolean propose(Bid bid) {
+        Bid currentBid;
+        do {
+            if (latestBid.isMarked()) {
+                return false;
+            }
+            currentBid = latestBid.getReference();
+            if (currentBid != null && bid.getPrice() <= currentBid.getPrice()) {
+                return false;
+            }
+        } while (!latestBid.compareAndSet(currentBid, bid, false, false));
+
+        notifier.sendOutdatedMessage(currentBid);
+
+        return true;
+    }
+
+    public Bid getLatestBid() {
+        return latestBid.getReference();
+    }
+
+    public Bid stopAuction() {
+        // to prevent multiple stop actions and incorrect latestBid value
+        if (latestBid.isMarked()) {
+            return latestBid.getReference();
+        }
+        Bid latest = latestBid.getReference();
+        latestBid.set(latest, true);
+        return latest;
+    }
+}
Index: src/main/java/course/concurrency/exams/auction/AuctionPessimisticReady.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/exams/auction/AuctionPessimisticReady.java b/src/main/java/course/concurrency/exams/auction/AuctionPessimisticReady.java
new file mode 100644
--- /dev/null	(date 1665590025186)
+++ b/src/main/java/course/concurrency/exams/auction/AuctionPessimisticReady.java	(date 1665590025186)
@@ -0,0 +1,37 @@
+package course.concurrency.exams.auction;
+
+public class AuctionPessimisticReady implements Auction {
+
+    private final Notifier notifier;
+
+    // volatile is used to return correct getLatestBid() result.
+    // Alternative: plain variable + synchronized getLatestBid
+    private volatile Bid latestBid = new Bid(-1L, -1L, -1L);
+
+    private final Object lock = new Object();
+
+    public AuctionPessimisticReady(Notifier notifier) {
+        this.notifier = notifier;
+    }
+
+    public boolean propose(Bid bid) {
+        // this condition filter bids with lower price and seriously reduce contention
+        if (bid.getPrice() > latestBid.getPrice()) {
+            synchronized (lock) {
+                // double-check is required to prevent data races
+                if (bid.getPrice() > latestBid.getPrice()) {
+                    notifier.sendOutdatedMessage(latestBid);
+                    latestBid = bid;
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    public Bid getLatestBid() {
+        return latestBid;
+    }
+
+}